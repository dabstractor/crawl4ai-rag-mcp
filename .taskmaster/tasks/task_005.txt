# Task ID: 5
# Title: Implement Error Handling Framework
# Status: pending
# Dependencies: 3, 4
# Priority: high
# Description: Create a comprehensive error handling system for the HTTP API.
# Details:
In src/api/middleware.py, implement an error handling framework that:
1. Catches exceptions and converts them to appropriate HTTP responses
2. Maps different error types to appropriate HTTP status codes
3. Formats error messages according to the PRD specification
4. Logs errors for debugging and monitoring

Implement exception handlers for common exceptions like ValidationError, HTTPException, and general exceptions. Use FastAPI's exception_handler decorator. Create custom exception classes for specific error scenarios. Implement a function to generate standardized error responses. Example:
```python
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import logging

logger = logging.getLogger(__name__)

class MCPToolError(Exception):
    def __init__(self, message: str, code: str = "INTERNAL_ERROR", details: str = None):
        self.message = message
        self.code = code
        self.details = details
        super().__init__(self.message)

def add_exception_handlers(app: FastAPI):
    @app.exception_handler(HTTPException)
    async def http_exception_handler(request: Request, exc: HTTPException):
        return JSONResponse(
            status_code=exc.status_code,
            content={"error": {"code": "HTTP_ERROR", "message": exc.detail}}
        )
        
    @app.exception_handler(MCPToolError)
    async def mcp_tool_error_handler(request: Request, exc: MCPToolError):
        logger.error(f"MCP Tool Error: {exc.message}")
        return JSONResponse(
            status_code=500,
            content={"error": {"code": exc.code, "message": exc.message, "details": exc.details}}
        )
```

# Test Strategy:
Create unit tests that trigger different types of exceptions and verify that they're correctly caught and formatted. Test that appropriate HTTP status codes are returned for different error types. Verify that error logging works correctly. Test that the error response format matches the PRD specification.
