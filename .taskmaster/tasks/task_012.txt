# Task ID: 12
# Title: Implement Request Logging Middleware
# Status: pending
# Dependencies: 3, 11
# Priority: medium
# Description: Create middleware for logging HTTP requests and responses.
# Details:
In src/api/middleware.py, implement request logging middleware that:
1. Logs incoming requests with method, path, and query parameters
2. Logs response status codes and timing information
3. Includes correlation IDs for request tracking
4. Configurable log levels based on environment

Implement using FastAPI middleware. Include timing information to help identify slow endpoints. Use Python's logging module with proper formatting. Example:
```python
import time
import uuid
import logging
from fastapi import FastAPI, Request
from starlette.middleware.base import BaseHTTPMiddleware

logger = logging.getLogger(__name__)

class RequestLoggingMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        request_id = str(uuid.uuid4())
        start_time = time.time()
        
        # Log request
        logger.info(f"Request {request_id}: {request.method} {request.url.path}")
        
        # Process request
        try:
            response = await call_next(request)
            process_time = time.time() - start_time
            
            # Log response
            logger.info(
                f"Response {request_id}: {response.status_code} completed in {process_time:.3f}s"
            )
            
            # Add custom headers
            response.headers["X-Process-Time"] = str(process_time)
            response.headers["X-Request-ID"] = request_id
            
            return response
        except Exception as e:
            process_time = time.time() - start_time
            logger.error(
                f"Error {request_id}: {str(e)} after {process_time:.3f}s"
            )
            raise

def add_logging_middleware(app: FastAPI):
    app.add_middleware(RequestLoggingMiddleware)
```

# Test Strategy:
Test the logging middleware by sending various requests and verifying that they're correctly logged. Test error scenarios and verify that errors are properly logged. Check that timing information is accurate and that correlation IDs are consistent across log entries.
