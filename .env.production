# ========================================
# PRODUCTION ENVIRONMENT CONFIGURATION
# ========================================
# Copy this file to .env and update the values for production deployment

# ========================================
# MCP CRAWL4AI SERVER CONFIGURATION
# ========================================

# The transport for the MCP server - either 'sse' or 'stdio' (defaults to sse if left empty)
TRANSPORT=sse

# Host to bind to if using sse as the transport (leave empty if using stdio)
# Set this to 0.0.0.0 if using Docker, otherwise set to localhost (if using uv)
HOST=0.0.0.0

# Port to listen on if using sse as the transport (leave empty if using stdio).
# Default port for Docker deployment
PORT=8051

# ========================================
# HTTP API CONFIGURATION
# ========================================

# Enable HTTP API endpoints alongside MCP protocol
ENABLE_HTTP_API=true

# CORS origins for production deployment
# IMPORTANT: Replace with your actual production domains
CORS_ORIGINS=https://your-production-domain.com,https://your-ui-domain.com

# API rate limiting (requests per minute per IP)
API_RATE_LIMIT=100

# Enable/disable rate limiting
RATE_LIMIT_ENABLED=true

# Logging level for API server (debug, info, warning, error)
# Use 'warning' or 'error' for production
LOG_LEVEL=warning

# IMPORTANT: Add your OpenAI API key here for embeddings
# Get your Open AI API Key by following these instructions -
# https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key
# This is for the embedding model - text-embed-small-3 will be used
OPENAI_API_KEY=your-openai-api-key-here

# The LLM you want to use for summaries and contextual embeddings
# Generally this is a very cheap and fast LLM like gpt-4o-mini
MODEL_CHOICE=gpt-4o-mini

# ========================================
# SEARXNG INTEGRATION CONFIGURATION
# ========================================

# SearXNG URL for your search instance - configured for Docker Compose integration
# When using Docker Compose, this points to the internal SearXNG service
SEARXNG_URL=http://searxng:8080

# Optional: Custom user agent for SearXNG requests
SEARXNG_USER_AGENT=MCP-Crawl4AI-RAG-Server/1.0

# Optional: Default search engines to use (comma-separated list)
# Available engines depend on your SearXNG instance configuration
SEARXNG_DEFAULT_ENGINES=google,bing,duckduckgo

# Optional: Request timeout in seconds for SearXNG API calls
SEARXNG_TIMEOUT=30

# ========================================
# PRODUCTION CADDY CONFIGURATION
# ========================================

# IMPORTANT: Replace with your actual production domain
SEARXNG_HOSTNAME=https://your-domain.com

# TLS configuration for Caddy
# Use your email for Let's Encrypt certificates in production
SEARXNG_TLS=your-email@example.com

# ========================================
# RAG STRATEGIES CONFIGURATION
# ========================================
# RAG strategies - set these to "true" or "false" (default to "false")

# USE_CONTEXTUAL_EMBEDDINGS: Enhances embeddings with contextual information for better retrieval
USE_CONTEXTUAL_EMBEDDINGS=false

# USE_HYBRID_SEARCH: Combines vector similarity search with keyword search for better results
USE_HYBRID_SEARCH=true

# USE_AGENTIC_RAG: Enables code example extraction, storage, and specialized code search functionality
USE_AGENTIC_RAG=false

# USE_RERANKING: Applies cross-encoder reranking to improve search result relevance
USE_RERANKING=true

# USE_KNOWLEDGE_GRAPH: Enables AI hallucination detection and repository parsing tools using Neo4j
# If you set this to true, you must also set the Neo4j environment variables below.
USE_KNOWLEDGE_GRAPH=false

# ========================================
# DATABASE CONFIGURATION (SELF-CONTAINED)
# ========================================
# These are automatically configured for the local PostgreSQL container
# DO NOT CHANGE these values - they match the docker-compose.yml configuration

# Local PostgreSQL connection (replaces Supabase)
SUPABASE_URL=postgresql://crawl4ai_user:crawl4ai_secure_password_2024@postgres:5432/crawl4ai_rag
SUPABASE_SERVICE_KEY=dummy_key_for_local_postgres

# ========================================
# OPTIONAL NEO4J CONFIGURATION
# ========================================
# Neo4j Configuration for Knowledge Graph Tools
# These are required for the AI hallucination detection and repository parsing tools
# Leave empty to disable knowledge graph functionality

# Neo4j connection URI - use bolt://localhost:7687 for local, neo4j:// for cloud instances
# IMPORTANT: If running the MCP server through Docker, change localhost to host.docker.internal
NEO4J_URI=bolt://host.docker.internal:7687

# Neo4j username (usually 'neo4j' for default installations)
NEO4J_USER=neo4j

# Neo4j password for your database instance
NEO4J_PASSWORD=your-neo4j-password-here